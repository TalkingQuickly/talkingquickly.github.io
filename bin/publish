#!/bin/bash
# Wrapper script to run publish inside Docker container

# Check for --force flag
FORCE=false
if [[ "$1" == "--force" ]]; then
    FORCE=true
fi

# Check for uncommitted changes
if [[ "$FORCE" == false ]]; then
    # Check if there are any uncommitted changes
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo "⚠️  You have uncommitted changes in your repository."
        echo ""
        git status --short
        echo ""
        read -p "Would you like to commit and push these changes now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            # Get commit message from user
            echo "Enter commit message (or press Enter for default):"
            read -r commit_message
            if [[ -z "$commit_message" ]]; then
                commit_message="Update site content before publishing"
            fi
            
            # Add all changes and commit
            git add -A
            git commit -m "$commit_message"
            echo "✅ Changes committed"
        else
            echo "❌ Publishing cancelled. Please commit or stash your changes."
            echo ""
            echo "   To commit: git add -A && git commit -m 'Your message'"
            echo "   To stash: git stash"
            echo "   To force publish anyway: ./bin/publish --force"
            exit 1
        fi
    fi
    
    # Check if there are unpushed commits on the current branch
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u} 2>/dev/null || echo "")
    
    if [[ -z "$REMOTE" ]]; then
        echo "⚠️  Warning: Current branch '$BRANCH' has no upstream branch."
        read -p "Would you like to push to origin and set upstream? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git push -u origin "$BRANCH"
            echo "✅ Pushed to origin and set upstream"
        else
            read -p "Continue publishing anyway? (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
    elif [[ "$LOCAL" != "$REMOTE" ]]; then
        # Count unpushed commits
        UNPUSHED_COUNT=$(git rev-list @{u}..HEAD --count)
        echo "⚠️  You have $UNPUSHED_COUNT unpushed commit(s) on branch '$BRANCH'."
        echo ""
        git log @{u}..HEAD --oneline
        echo ""
        read -p "Would you like to push these changes now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git push
            echo "✅ Changes pushed to remote"
        else
            echo "❌ Publishing cancelled. Please push your changes."
            echo ""
            echo "   To push: git push"
            echo "   To force publish anyway: ./bin/publish --force"
            exit 1
        fi
    fi
fi

# Check if SSH_AUTH_SOCK is set
if [ -z "$SSH_AUTH_SOCK" ]; then
    echo "⚠️  Warning: SSH_AUTH_SOCK not set. You may have issues pushing to GitHub."
    echo "   Run: eval \$(ssh-agent) && ssh-add ~/.ssh/your_github_key"
fi

# Export SSH_AUTH_SOCK for docker-compose
export SSH_AUTH_SOCK

echo "✅ Repository is clean and up to date. Starting publish..."
docker compose run --rm shell ./scripts/publish.sh