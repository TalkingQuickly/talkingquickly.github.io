#!/bin/bash

# Exit on error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if a file path was provided
if [ $# -eq 0 ]; then
    echo -e "${RED}Error: Please provide a path to a markdown post${NC}"
    echo "Usage: ./social _posts/YYYY-MM-DD-post-title.md"
    exit 1
fi

POST_FILE="$1"

# Check if the file exists
if [ ! -f "$POST_FILE" ]; then
    echo -e "${RED}Error: File not found: $POST_FILE${NC}"
    exit 1
fi

# Check for required environment variables
if [ -z "$BUFFER_ACCESS_TOKEN" ]; then
    echo -e "${RED}Error: BUFFER_ACCESS_TOKEN environment variable is not set${NC}"
    echo "Please set it with: export BUFFER_ACCESS_TOKEN='your_token_here'"
    exit 1
fi

# Profile IDs for different platforms (set these as env vars)
TWITTER_PROFILE_ID="${BUFFER_TWITTER_PROFILE_ID}"
LINKEDIN_PROFILE_ID="${BUFFER_LINKEDIN_PROFILE_ID}"
BLUESKY_PROFILE_ID="${BUFFER_BLUESKY_PROFILE_ID}"

# Function to check if profile IDs are set
check_profile_ids() {
    local missing=0
    
    if [ -z "$TWITTER_PROFILE_ID" ]; then
        echo -e "${YELLOW}Warning: BUFFER_TWITTER_PROFILE_ID not set - Twitter posts won't be queued${NC}"
        missing=1
    fi
    
    if [ -z "$LINKEDIN_PROFILE_ID" ]; then
        echo -e "${YELLOW}Warning: BUFFER_LINKEDIN_PROFILE_ID not set - LinkedIn posts won't be queued${NC}"
        missing=1
    fi
    
    if [ -z "$BLUESKY_PROFILE_ID" ]; then
        echo -e "${YELLOW}Warning: BUFFER_BLUESKY_PROFILE_ID not set - Bluesky posts won't be queued${NC}"
        missing=1
    fi
    
    if [ $missing -eq 1 ]; then
        echo -e "${BLUE}Set profile IDs with:${NC}"
        echo "  export BUFFER_TWITTER_PROFILE_ID='your_twitter_profile_id'"
        echo "  export BUFFER_LINKEDIN_PROFILE_ID='your_linkedin_profile_id'"
        echo "  export BUFFER_BLUESKY_PROFILE_ID='your_bluesky_profile_id'"
        echo ""
    fi
}

check_profile_ids

echo -e "${GREEN}Processing blog post: $POST_FILE${NC}"
echo ""

# Create a temporary file for the Claude prompt
TEMP_PROMPT=$(mktemp)
TEMP_RESPONSE=$(mktemp)

# Create the prompt for Claude
cat > "$TEMP_PROMPT" << 'EOF'
I need you to help draft social media posts for a blog post with specific audience targeting. Please:

1. Read the blog post file
2. Extract the title and understand the main points
3. Consider the target audience for each platform and find relevant angles

**AUDIENCE PROFILES:**
- **Twitter/X**: Startup founders, VCs, entrepreneurial community - they care about business insights, scaling, team building, product-market fit
- **LinkedIn**: Startup ecosystem, VCs, business leaders - similar to Twitter but more formal, thought leadership focused
- **Bluesky**: Elixir engineers, technical community - they care about technical implementation, architecture, engineering culture

**YOUR TASK:**
First, analyze if the blog post has relevant angles for each audience:
- For Twitter/LinkedIn: Look for business insights, leadership lessons, startup challenges, scaling stories, or high-level tech trends
- For Bluesky: Look for technical details, engineering practices, Elixir-specific content, or developer culture topics

Then create appropriate social media posts:
- **Twitter/X post** (max 280 characters, punchy, startup/VC focused angle if available)
- **LinkedIn post** (professional tone, ~1500 chars max, business/leadership angle if available)
- **Bluesky post** (max 300 chars, technical/engineering angle if available)

**IMPORTANT**: 
- If content isn't relevant to an audience, first try to find a creative angle that would be relevant
- Only if no angle exists, set that platform's post to null with an explanation
- For example, a deeply technical Elixir post might not suit LinkedIn UNLESS you can frame it as "why technical excellence matters for startups"

For each post:
- Include the blog post URL (use the permalink from the frontmatter to construct the full URL with https://www.talkingquickly.co.uk)
- Use platform-appropriate tone and hashtags
- Focus on what that specific audience values

Please output in this JSON format:
```json
{
  "twitter": "Your Twitter post here with URL" or null,
  "twitter_note": "Optional: explanation if null or angle chosen",
  "linkedin": "Your LinkedIn post here with URL" or null,
  "linkedin_note": "Optional: explanation if null or angle chosen",
  "bluesky": "Your Bluesky post here with URL" or null,
  "bluesky_note": "Optional: explanation if null or angle chosen"
}
```

The blog post file to process is:
EOF

echo "$POST_FILE" >> "$TEMP_PROMPT"

echo -e "${BLUE}Generating social media posts with Claude...${NC}"

# Use Claude to generate the posts
if command -v claude &> /dev/null; then
    claude < "$TEMP_PROMPT" > "$TEMP_RESPONSE"
else
    echo -e "${RED}Error: Claude CLI not found${NC}"
    echo "Please ensure Claude Code is installed and accessible"
    rm "$TEMP_PROMPT" "$TEMP_RESPONSE"
    exit 1
fi

# Extract JSON from Claude's response (looking for JSON block)
JSON_CONTENT=$(sed -n '/^```json$/,/^```$/p' "$TEMP_RESPONSE" | sed '1d;$d')

if [ -z "$JSON_CONTENT" ]; then
    echo -e "${RED}Error: Could not extract JSON from Claude's response${NC}"
    echo "Response was:"
    cat "$TEMP_RESPONSE"
    rm "$TEMP_PROMPT" "$TEMP_RESPONSE"
    exit 1
fi

# Save JSON to temp file for processing
echo "$JSON_CONTENT" > "${TEMP_RESPONSE}.json"

# Parse the JSON to get individual posts and notes
TWITTER_POST=$(python3 -c "import json; data = json.load(open('${TEMP_RESPONSE}.json')); post = data.get('twitter'); print(post if post else '')" 2>/dev/null || echo "")
TWITTER_NOTE=$(python3 -c "import json; data = json.load(open('${TEMP_RESPONSE}.json')); print(data.get('twitter_note', ''))" 2>/dev/null || echo "")
LINKEDIN_POST=$(python3 -c "import json; data = json.load(open('${TEMP_RESPONSE}.json')); post = data.get('linkedin'); print(post if post else '')" 2>/dev/null || echo "")
LINKEDIN_NOTE=$(python3 -c "import json; data = json.load(open('${TEMP_RESPONSE}.json')); print(data.get('linkedin_note', ''))" 2>/dev/null || echo "")
BLUESKY_POST=$(python3 -c "import json; data = json.load(open('${TEMP_RESPONSE}.json')); post = data.get('bluesky'); print(post if post else '')" 2>/dev/null || echo "")
BLUESKY_NOTE=$(python3 -c "import json; data = json.load(open('${TEMP_RESPONSE}.json')); print(data.get('bluesky_note', ''))" 2>/dev/null || echo "")

# Display the generated posts
echo -e "${GREEN}Generated Posts:${NC}"
echo ""

if [ -n "$TWITTER_POST" ]; then
    echo -e "${BLUE}Twitter/X:${NC}"
    echo "$TWITTER_POST"
    [ -n "$TWITTER_NOTE" ] && echo -e "${YELLOW}Note: $TWITTER_NOTE${NC}"
else
    echo -e "${YELLOW}Twitter/X: No post generated${NC}"
    [ -n "$TWITTER_NOTE" ] && echo "Reason: $TWITTER_NOTE"
fi
echo ""

if [ -n "$LINKEDIN_POST" ]; then
    echo -e "${BLUE}LinkedIn:${NC}"
    echo "$LINKEDIN_POST"
    [ -n "$LINKEDIN_NOTE" ] && echo -e "${YELLOW}Note: $LINKEDIN_NOTE${NC}"
else
    echo -e "${YELLOW}LinkedIn: No post generated${NC}"
    [ -n "$LINKEDIN_NOTE" ] && echo "Reason: $LINKEDIN_NOTE"
fi
echo ""

if [ -n "$BLUESKY_POST" ]; then
    echo -e "${BLUE}Bluesky:${NC}"
    echo "$BLUESKY_POST"
    [ -n "$BLUESKY_NOTE" ] && echo -e "${YELLOW}Note: $BLUESKY_NOTE${NC}"
else
    echo -e "${YELLOW}Bluesky: No post generated${NC}"
    [ -n "$BLUESKY_NOTE" ] && echo "Reason: $BLUESKY_NOTE"
fi
echo ""

# Ask for confirmation before posting
read -p "Do you want to queue these posts to Buffer? (y/n) " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Cancelled. Posts were not queued.${NC}"
    rm "$TEMP_PROMPT" "$TEMP_RESPONSE" "${TEMP_RESPONSE}.json"
    exit 0
fi

# Function to queue a post to Buffer
queue_to_buffer() {
    local profile_id="$1"
    local text="$2"
    local platform="$3"
    
    if [ -z "$profile_id" ]; then
        echo -e "${YELLOW}Skipping $platform (no profile ID set)${NC}"
        return
    fi
    
    # Escape the text for JSON
    local escaped_text=$(echo "$text" | python3 -c "import sys, json; print(json.dumps(sys.stdin.read().strip()))")
    
    # Create the API request
    local response=$(curl -s -X POST "https://api.bufferapp.com/1/updates/create.json" \
        -d "access_token=${BUFFER_ACCESS_TOKEN}" \
        -d "profile_ids[]=${profile_id}" \
        -d "text=${escaped_text}" \
        -d "now=false")
    
    # Check if successful
    if echo "$response" | grep -q '"success":true'; then
        echo -e "${GREEN}✓ $platform post queued successfully${NC}"
    else
        echo -e "${RED}✗ Failed to queue $platform post${NC}"
        echo "Response: $response"
    fi
}

echo ""
echo -e "${BLUE}Queueing posts to Buffer...${NC}"

# Queue each post (only if it exists)
if [ -n "$TWITTER_POST" ]; then
    queue_to_buffer "$TWITTER_PROFILE_ID" "$TWITTER_POST" "Twitter"
else
    echo -e "${YELLOW}Skipping Twitter (no post generated for this audience)${NC}"
fi

if [ -n "$LINKEDIN_POST" ]; then
    queue_to_buffer "$LINKEDIN_PROFILE_ID" "$LINKEDIN_POST" "LinkedIn"
else
    echo -e "${YELLOW}Skipping LinkedIn (no post generated for this audience)${NC}"
fi

if [ -n "$BLUESKY_POST" ]; then
    queue_to_buffer "$BLUESKY_PROFILE_ID" "$BLUESKY_POST" "Bluesky"
else
    echo -e "${YELLOW}Skipping Bluesky (no post generated for this audience)${NC}"
fi

# Clean up temp files
rm "$TEMP_PROMPT" "$TEMP_RESPONSE" "${TEMP_RESPONSE}.json" 2>/dev/null || true

echo ""
echo -e "${GREEN}Done! Check your Buffer queue to review and schedule the posts.${NC}"
echo -e "${BLUE}Visit: https://publish.buffer.com/calendar${NC}"