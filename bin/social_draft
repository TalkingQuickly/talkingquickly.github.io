#!/bin/bash

# Exit on error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check if a file path was provided
if [ $# -eq 0 ]; then
    echo -e "${RED}Error: Please provide a path to a markdown post${NC}"
    echo "Usage: ./bin/social_draft _posts/YYYY-MM-DD-post-title.md"
    exit 1
fi

POST_FILE="$1"

# Check if the file exists
if [ ! -f "$POST_FILE" ]; then
    echo -e "${RED}Error: File not found: $POST_FILE${NC}"
    exit 1
fi

# Check if claude is available
if ! command -v claude &> /dev/null; then
    echo -e "${RED}Error: claude CLI not found${NC}"
    echo "Please install Claude Code to use this script"
    exit 1
fi

# Extract post filename without path and extension
POST_BASENAME=$(basename "$POST_FILE" .md)
POST_BASENAME=$(basename "$POST_BASENAME" .markdown)

# Extract the date and slug from filename (assuming format YYYY-MM-DD-slug.md)
if [[ "$POST_BASENAME" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})-(.+)$ ]]; then
    POST_DATE="${BASH_REMATCH[1]}"
    POST_SLUG="${BASH_REMATCH[2]}"
    # Convert date to URL format (YYYY/MM)
    YEAR=$(echo $POST_DATE | cut -d'-' -f1)
    MONTH=$(echo $POST_DATE | cut -d'-' -f2)
    POST_URL="https://www.talkingquickly.co.uk/$YEAR/$MONTH/$POST_SLUG/"
else
    # Fallback for posts without date in filename - check for permalink in front matter
    PERMALINK=$(grep -m1 "^permalink:" "$POST_FILE" | sed 's/permalink: *//; s/"//g; s/^[ \t]*//;s/[ \t]*$//')
    if [ -n "$PERMALINK" ]; then
        POST_URL="https://www.talkingquickly.co.uk$PERMALINK"
    else
        POST_URL="https://www.talkingquickly.co.uk/[CHECK-URL]/"
    fi
fi

# Get today's date
TODAY=$(date +%Y-%m-%d)

# Output filename
OUTPUT_FILE="_social/${POST_BASENAME}-${TODAY}.md"

# Extract title from the post
TITLE=$(grep -m1 "^title:" "$POST_FILE" | sed 's/title: *//; s/"//g; s/^[ \t]*//;s/[ \t]*$//')
if [ -z "$TITLE" ]; then
    echo -e "${YELLOW}Warning: Could not extract title from post${NC}"
    echo "Enter post title:"
    read -r TITLE
fi

# Extract post content (remove front matter)
POST_CONTENT=$(sed '1,/^---$/d' "$POST_FILE" | sed '1,/^---$/d')

# Create _social directory if it doesn't exist
mkdir -p _social

echo -e "${BLUE}=== AI-Powered Social Media Post Creator ===${NC}"
echo ""
echo -e "Blog post: ${GREEN}$TITLE${NC}"
echo -e "URL: ${GREEN}$POST_URL${NC}"
echo -e "Output will be saved to: ${GREEN}$OUTPUT_FILE${NC}"
echo ""
echo -e "${CYAN}Launching Claude to help create social media posts...${NC}"
echo ""

# Create the prompt for Claude
PROMPT="I need help creating social media posts for my blog post. Here's the context:

**Blog Post Title:** $TITLE
**Blog Post URL:** $POST_URL
**Output File:** $OUTPUT_FILE

**Blog Post Content:**
$POST_CONTENT

---

Please help me create social media posts for this blog post. I need:

1. **Twitter/X post** (280 chars max)
   - Audience: VCs and startup founders
   - Style: Punchy, insightful, discussion-provoking
   - Include the link: $POST_URL

2. **LinkedIn post** (3000 chars max)
   - Audience: Corporate leaders and VCs  
   - Style: Professional thought leadership, can be longer and more detailed
   - Include the link: $POST_URL

3. **Bluesky post** (300 chars max)
   - Audience: Programmers and tech community
   - Style: Technical, authentic, community-focused
   - Include the link: $POST_URL

4. **Optional: Twitter/X thread** (5-8 tweets)
   - Break down key insights
   - Each tweet under 280 chars
   - Last tweet should include the link

Let's work together to create these posts. Please suggest initial versions and we can iterate on them together. After we finalize each post, please save them in a markdown format that I can copy to: $OUTPUT_FILE

The format should be:
---
source_post: $POST_FILE
title: \"$TITLE\"
date: $TODAY
url: $POST_URL
---

# Social Media Posts for: $TITLE

## Platform Name
[The final post text]

---

Let's start with the Twitter/X post. What would you suggest?"

# Launch Claude with the prompt
echo "$PROMPT" | claude

# After Claude session ends, check if the output file was mentioned
echo ""
echo -e "${YELLOW}=== Claude session ended ===${NC}"
echo ""
echo -e "${BLUE}Don't forget to save the final posts to: ${GREEN}$OUTPUT_FILE${NC}"
echo ""
echo "You can copy the markdown output from Claude and save it to the file."
echo ""

# Ask if user wants to create the file now
echo -e "${YELLOW}Would you like to create/edit the output file now? (y/N)${NC}"
read -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    ${EDITOR:-nvim} "$OUTPUT_FILE"
    echo -e "${GREEN}âœ“ Social posts saved to $OUTPUT_FILE${NC}"
fi